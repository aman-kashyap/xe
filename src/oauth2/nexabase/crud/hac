To solve this challenge, write an HTTP GET method to retrieve information from a particular movie database. Complete the function in the editor; it has one parameter: a string, substr. The function must perform the following tasks:
Query https://jsonmock.hackerrank.com/api/movies/search/?Title=substr (where substr is the value of substr). The query response from the website is a JSON response with the following five fields:
page: The current page.
per_page: The maximum number of results per page.
total: The total number of such movies having the substring substr in their title.
total_pages: The total number of pages which must be queried to get all the results.
data: An array of JSON objects containing movie information where the Title field denotes the title of the movie. Note that this field is paginated so, in order to incorporate pagination, you must query https://jsonmock.hackerrank.com/api/movies/search/?Title=substr&page=pageNumber, where pageNumber is an integer denoting the page you would like to view (e.g., 1, 2, etc.).
Create an array of strings named titles to store total elements. For each page of results, store the Title of each movie in the titles array.
Sort titles in ascending order and return it as your answer.
 
Input Format
A single string, substr, denoting the substring you must query for.
 
Output Format
Return an array of strings corresponding to movie titles with susbtr in their Title, sorted in ascending order.
 
Sample Input 0
spiderman
 
Sample Output 0
Amazing Spiderman Syndrome
Fighting, Flying and Driving: The Stunts of Spiderman 3
Hollywood's Master Storytellers: Spiderman Live
Italian Spiderman
Spiderman
Spiderman
Spiderman 5
Spiderman and Grandma
Spiderman in Cannes
Superman, Spiderman or Batman
The Amazing Spiderman T4 Premiere Special
The Death of Spiderman
They Call Me Spiderman
 
Explanation 0
For this example, we want all the movie titles containing the substring spiderman. The response for the query https://jsonmock.hackerrank.com/api/movies/search/?Title=spiderman&page=1 is:
{
  "page": "1",
  "per_page": 10,
  "total": 13,
  "total_pages": 2,
  "data": [
    {
      "Poster": "https://images-na.ssl-images-amazon.com/images/M/MV5BYjFhN2RjZTctMzA2Ni00NzE2LWJmYjMtNDAyYTllOTkyMmY3XkEyXkFqcGdeQXVyNTA0OTU0OTQ@._V1_SX300.jpg",
      "Title": "Italian Spiderman",
      "Type": "movie",
      "Year": "2007",
      "imdbID": "tt2705436"
    },
    {
      "Poster": "https://images-na.ssl-images-amazon.com/images/M/MV5BMjQ4MzcxNDU3N15BMl5BanBnXkFtZTgwOTE1MzMxNzE@._V1_SX300.jpg",
      "Title": "Superman, Spiderman or Batman",
      "Type": "movie",
      "Year": "2011",
      "imdbID": "tt2084949"
    },
    {
      "Poster": "N/A",
      "Title": "Spiderman",
      "Type": "movie",
      "Year": "1990",
      "imdbID": "tt0100669"
    },
    {
      "Poster": "N/A",
      "Title": "Spiderman",
      "Type": "movie",
      "Year": "2010",
      "imdbID": "tt1785572"
    },
    {
      "Poster": "N/A",
      "Title": "Fighting, Flying and Driving: The Stunts of Spiderman 3",
      "Type": "movie",
      "Year": "2007",
      "imdbID": "tt1132238"
    },
    {
      "Poster": "http://ia.media-imdb.com/images/M/MV5BMjE3Mzg0MjAxMl5BMl5BanBnXkFtZTcwNjIyODg5Mg@@._V1_SX300.jpg",
      "Title": "Spiderman and Grandma",
      "Type": "movie",
      "Year": "2009",
      "imdbID": "tt1433184"
    },
    {
      "Poster": "N/A",
      "Title": "The Amazing Spiderman T4 Premiere Special",
      "Type": "movie",
      "Year": "2012",
      "imdbID": "tt2233044"
    },
    {
      "Poster": "N/A",
      "Title": "Amazing Spiderman Syndrome",
      "Type": "movie",
      "Year": "2012",
      "imdbID": "tt2586634"
    },
    {
      "Poster": "N/A",
      "Title": "Hollywood's Master Storytellers: Spiderman Live",
      "Type": "movie",
      "Year": "2006",
      "imdbID": "tt2158533"
    },
    {
      "Poster": "N/A",
      "Title": "Spiderman 5",
      "Type": "movie",
      "Year": "2008",
      "imdbID": "tt3696826"
    }
  ]
}
 
The response for the query https://jsonmock.hackerrank.com/api/movies/search/?Title=spiderman&page=2 is:
{
  "page": "2",
  "per_page": 10,
  "total": 13,
  "total_pages": 2,
  "data": [
    {
      "Poster": "N/A",
      "Title": "They Call Me Spiderman",
      "Type": "movie",
      "Year": "2016",
      "imdbID": "tt5861236"
    },
    {
      "Poster": "N/A",
      "Title": "The Death of Spiderman",
      "Type": "movie",
      "Year": "2015",
      "imdbID": "tt5921428"
    },
    {
      "Poster": "https://images-na.ssl-images-amazon.com/images/M/MV5BZDlmMGQwYmItNTNmOS00OTNkLTkxNTYtNDM3ZWVlMWUyZDIzXkEyXkFqcGdeQXVyMTA5Mzk5Mw@@._V1_SX300.jpg",
      "Title": "Spiderman in Cannes",
      "Type": "movie",
      "Year": "2016",
      "imdbID": "tt5978586"
    }
  ]
}
 
The respective values of the Title field for each movie in each response page are:
Italian Spiderman
Superman, Spiderman or Batman
Spiderman
Spiderman
Fighting, Flying and Driving: The Stunts of Spiderman 3
Spiderman and Grandma
The Amazing Spiderman T4 Premiere Special
Amazing Spiderman Syndrome
Hollywood's Master Storytellers: Spiderman Live
Spiderman 5
They Call Me Spiderman
The Death of Spiderman
Spiderman in Cannes
We then store each title in our titles array, sort it in ascending order, and return it as our answer.
 
YOUR ANSWER
✖
We recommend you take a quick tour of our editor before you proceed. The timer will pause up to 90 seconds for the tour.   Start tour
Draft saved 12:36 pm



















We encode a string, s, of space-separated words by performing the following sequence of actions:
Replace each character with its ASCII value representation.
Reverse the string.
For example, the table below shows the conversion from the string Hacker Rank to the ASCII string 729799107101114328297110107:
Character H a c k e r   R a n k
ASCII Value 72  97  99  107 101 114 32  82  97  110 107
We then reverse the ASCII string to get the encoded string 701011792823411101701997927.
For reference, the characters in s correspond to the following ASCII values:
The value range for A through Z is 65 through 90.
The value range for a through z is 97 through 122.
The value of the whitespace character (i.e.,  ) is 32.
Complete the decode function in the editor below. It has one parameter:
Name  Type  Description
encoded string  A reversed ASCII string denoting an encoded string s.
The function must decode the encoded string and return the original unencoded string (i.e., s).
Input Format
A string, encoded, denoting the encoded string s.
Constraints
1 ≤ |s| ≤ 105
s contains upper and lower case English alphabetic letters and spaces (i.e., [a-zA-Z ]) only.
Output Format
Return a string denoting the decoded string (i.e., s).
Sample Case 0
Sample Input 0
23511011501782351112179911801562340161171141148
Sample Output 0
Truth Always Wins 
Explanation 0
We reverse encoded to get 84114117116104326510811997121115328710511011532. We then replace each ASCII value with its corresponding character:
ASCII 84  114 117 116 104 32  65  108 119 97  121 115 32  87  105 110 115 32
Char  T r u t h   A l w a y s   W i n s  
Finally, we return Truth Always Wins  as our decoded string.